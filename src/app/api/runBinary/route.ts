import { NextRequest, NextResponse } from 'next/server';
import { execFile } from 'child_process';
import { promisify } from 'util';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
dotenv.config();
const execFilePromise = promisify(execFile);

export async function POST(req: NextRequest) {
    const paths = {
        tempDir: '', 
        tempFilePath: '', 
        outputJsonFile: 'output.json'
    };
    try {
        const { fileName, fileContent, debug } = await req.json();

        if (!fileName || !fileContent) {
            return NextResponse.json({ error: 'fileName and fileContent are required.' }, { status: 400 });
        }

        paths.tempDir = path.join(process.cwd(), 'temp');
        if (!fs.existsSync(paths.tempDir)) {
            fs.mkdirSync(paths.tempDir);
        }

        paths.tempFilePath = path.join(paths.tempDir, fileName);

        fs.writeFileSync(paths.tempFilePath, fileContent, 'utf8');


        const binaryPath = 'E:\\Random Project\\renamer-app\\src\\app\\api\\runBinary\\renamer-win.exe';

        const args = ['--path', paths.tempFilePath, '-o', 'output.json'];
        if (debug) {
            args.push('--debug');
        }

        const { stdout, stderr } = await execFilePromise(binaryPath, args, {
            env: {
                ...process.env,
                OPENAI_API_KEY: process.env.OPENAI_API_KEY,
            }
        });
        console.log('stdout:', stdout);

        if (stderr) {
            console.error('Binary error:', stderr);
        }

        if (!fs.existsSync('output.json')) {
            return NextResponse.json({ error: 'Output JSON file was not generated by the binary.' }, { status: 500 });
        }

        const jsonData = fs.readFileSync('output.json', 'utf8');
        const renamedFiles = JSON.parse(jsonData);

        return NextResponse.json({ renamedFiles });

    } catch (error) {
        console.error('Error processing file:', error);
        return NextResponse.json({ error: 'Failed to process the file.' }, { status: 500 });
    } finally {
        try {
            if (fs.existsSync(paths.outputJsonFile)) {
                fs.unlinkSync(paths.outputJsonFile);
            }

            if (paths.tempFilePath && fs.existsSync(paths.tempFilePath)) {
                fs.unlinkSync(paths.tempFilePath); 
            }

            if (fs.existsSync(paths.tempDir)) {
                fs.rmdirSync(paths.tempDir, { recursive: true });
            }
        } catch (cleanupError) {
            console.error('Error during cleanup:', cleanupError);
        }
    }
}
